import telebot
import pymorphy2
import nltk
import config
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from deeppavlov import configs, build_model
from parse.horoscope_parser import HoroscopeParser
from parse.user import User

bot = telebot.TeleBot(config.BOT_TOKEN)

tokenizer_tox = AutoTokenizer.from_pretrained("sismetanin/rubert-toxic-pikabu-2ch")
toxic_model = AutoModelForSequenceClassification.from_pretrained("sismetanin/rubert-toxic-pikabu-2ch")
ner_model = build_model(configs.ner.ner_ontonotes_bert_mult, download=True)

morph = pymorphy2.MorphAnalyzer()
tokenizer = nltk.tokenize.TreebankWordTokenizer()

user_dict = {}


@bot.message_handler(commands=['start'])  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'start'
def start_message(message):
    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏–≤–µ—Ç!\n"
                     f"‚Ä¢ –Ø –∑–Ω–∞—é <b>–ø–æ–≥–æ–¥—É</b> –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞ ‚òÄ\n"
                     f"‚Ä¢ –ü–æ–¥—Å–∫–∞–∂—É —Ç–≤–æ–π <b>–≥–æ—Ä–æ—Å–∫–æ–ø</b> üîÆ\n"
                     f"‚Ä¢ –ê —Ç–∞–∫–∂–µ –ø–æ—Å–æ–≤–µ—Ç—É—é <b>—Ä–µ—Ü–µ–ø—Ç</b> –∏–∑ –∂–µ–ª–∞–µ–º—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤Ô∏èüçù\n\n"
                     f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–∞–ø–∏—à–∏ /help \n"
                     f"–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–ø–∏—à–∏ /exit\n",
                     parse_mode='HTML')


@bot.message_handler(commands=['help'])  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'help'
def help_message(message):
    bot.send_message(message.chat.id,
                     f"<b>–Ø –∑–Ω–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n\n"
                     f"/help - <i>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>\n\n"
                     f"/exit - <i>–í—ã—Ö–æ–¥</i>\n\n"
                     f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –≥–æ—Ä–æ—Å–∫–æ–ø –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç -- –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º, —è —Ç–µ–±—è –ø–æ–π–º—É!",
                     parse_mode='HTML')


@bot.message_handler(commands=['exit'])  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'exit'
def end_message(message):
    bot.send_message(message.chat.id,
                     f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏!\n")


@bot.message_handler(content_types=['text'])  # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_text(message):
    user = User()
    user_dict[message.chat.id] = user_dict.get(message.chat.id, user)

    request_words = tokenize_text(message.text)
    if '–æ–≤–µ–Ω' not in request_words:
        # check for toxic message
        tokens_pt = tokenizer_tox(message.text, return_tensors="pt")
        with torch.no_grad():
            pred = torch.nn.functional.softmax(toxic_model(**tokens_pt)[0], dim=1).squeeze()
            request_is_toxic = pred[1] > 0.8

        if request_is_toxic:
            bot.send_message(message.chat.id,
                             text='–û—á–µ–Ω—å –≥—Ä—É–±–æ üóøüò§ –Ø –∫ —Ç–∞–∫–æ–º—É –Ω–µ –ø—Ä–∏–≤—ã–∫–ª–∞!\n\n–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –≤–≤–µ–¥–∏—Ç–µ /help')
            return

    # classify request
    cnt_keywords_horo = sum([1 if word in HoroscopeParser.keywords else 0 for word in request_words])

    if cnt_keywords_horo > 0:
        # try to find date
        horo_parse = HoroscopeParser()
        horo_date = horo_parse.process_date(message.text, ner_model)
        user_dict[message.chat.id].horo_date = horo_date

        # try to find horo sign
        horo_sign = horo_parse.process_sign(message.text)
        if horo_sign is None:
            msg = bot.reply_to(message, '–ù–∞–∑–æ–≤–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ üîÆ')
            bot.register_next_step_handler(msg, process_sign_step)
        else:
            user_dict[message.chat.id].horo_sign = horo_sign
            generate_horo(message)

    else:
        bot.send_message(message.chat.id,
                         text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é(\n\n–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –≤–≤–µ–¥–∏—Ç–µ /help')


def process_sign_step(message):
    try:
        horo_parse = HoroscopeParser()
        chat_id = message.chat.id
        horo_sign = horo_parse.process_sign(message.text)
        if horo_sign is None:
            msg = bot.reply_to(message, '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ! –ù–∞–∑–æ–≤–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ üîÆ')
            bot.register_next_step_handler(msg, process_sign_step)
            return
        user_dict[chat_id].horo_sign = horo_sign
        generate_horo(message)
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')


def generate_horo(message):
    try:
        horo_parse = HoroscopeParser()
        chat_id = message.chat.id
        # get horoscope
        horo_date, horo_sign = user_dict[chat_id].horo_date, user_dict[chat_id].horo_sign
        bot.send_message(chat_id,
                         text='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ... üßô‚Äç‚ôÄÔ∏è\n')
        final_horo = horo_parse.get_horo(horo_date, horo_sign)
        # send horoscope to user
        bot.send_message(chat_id,
                         text=final_horo)

        # clear for opportunity to get new horo
        user_dict[chat_id].horo_date, user_dict[chat_id].horo_sign = None, None
        bot.send_message(chat_id,
                         text='–Ø –º–æ–≥—É –µ—â–µ —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å?\n–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–ø—Ä–æ—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /exit')
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')


def tokenize_text(text):
    words = tokenizer.tokenize(text)
    result = []

    for word in words:
        p = morph.parse(word)[0]
        result.append(p.normal_form)
    return result

bot.polling(none_stop=True, interval=0)
